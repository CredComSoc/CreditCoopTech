openapi: 3.0.0
#validate at https://apitools.dev/swagger-parser/online/
info:
  version: '0.2'
  title: Credit Commons
  description: An api for recursive mutual credit accounting. This spec has rather a lot of similar endpoints, because it does not support optional path parameters, and other limitations.
  contact:
    name: Matthew Slater
    url: https://matslats.net/contact
  license:
    name: GNU GPL
paths:
  "/":
    options:
      operationId: permittedEndpoints
      summary: "Get the available endpoints"
      description: Different endpoints may be available to different users.
      responses:
        200:
          description: operationIds of permitted requests for the current user.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Endpoints"
  /handshake:
    get:
      summary: Ping, with hash check.
      description: Every node connection should have matching hashes at all times.
      operationId: handShake
      parameters:
        - name: cc-user
          in: header
          description: The hostname of the calling ledger (if the caller isn't the client).
          required: false
          schema:
            type: string
        - name: cc-auth
          in: header
          description: The corresponding hash of the calling ledger (if the caller isn't
            the client).
          required: false
          schema:
            type: string
      responses:
        200:
          description: An array of status codes and urls of remote nodes.
          content:
            "application/json":
              schema:
                # actually its not an array in json if the keys are explicitly stated.
                type: array
                items:
                  type: array
                  items:
                    type: string
        "500":
          $ref: "#/components/responses/CCFailure"
  /accounts/filter/{fragment}:
    get:
      summary: Get account names (for payment autocomplete).
      operationId: accountNameAutocomplete
      description: Get accounts names on the current ledger or all trunkwards ledgers, optionally filtered by name.
      parameters:
        - name: cc-user
          in: header
          description: The hostname of the calling ledger (if the caller isn't the client).
          required: false
          schema:
            type: string
        - name: cc-auth
          in: header
          description: The corresponding hash of the calling ledger (if the caller isn't
            the client).
          required: false
          schema:
            type: string
        - name: fragment
          in: path
          description: The fragment of the name to filter by.
          required: true
          schema:
            type: string
        - name: tree
          in: query
          description: TRUE to show whole ledger tree, false to show current node only.
          required: false
          schema:
            type: string
            default: false
      responses:
        "200":
          description: The list of relative path names
          content:
            "application/json":
              schema:
                type: array
                items:
                  type: string
        "400":
          $ref: "#/components/responses/CCViolation"
        "500":
          $ref: "#/components/responses/CCFailure"

  "/account/history/{acc_id}":
    get:
      summary: Get account's balance history (to be removed).
      description: A series of times and balances, suitable for making a chart. NB it has been proposed that this method is superfluous to the API
      operationId: AccountHistory
      parameters:
        - name: cc-user
          in: header
          description: The hostname of the calling ledger (if the caller isn't the client).
          required: false
          schema:
            type: string
        - name: cc-auth
          in: header
          description: The corresponding hash of the calling ledger (if the caller isn't
            the client).
          required: false
          schema:
            type: string
        - name: acc_id
          in: path
          required: true
          description: The local name of the account
          schema:
            type: string
      responses:
        "200":
          description: The account summary object
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/AccountHistory"
        "400":
          $ref: "#/components/responses/CCViolation"
        "500":
          $ref: "#/components/responses/CCFailure"
  /account/limits/{acc_id}:
    get:
      summary: Get the min/max limits of the account.
      description: Every account has min and max balance limits, even if they defaults.
      operationId: accountLimits
      parameters:
        - name: cc-user
          in: header
          description: The hostname of the calling ledger (if the caller isn't the client).
          required: false
          schema:
            type: string
        - name: cc-auth
          in: header
          description: The corresponding hash of the calling ledger (if the caller isn't.
            the client)
          required: false
          schema:
            type: string
        - name: acc_id
          in: path
          description: The id of the account.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Success. The account's default or overridden min and max balance limits
          content:
            "application/json":
              schema:
                type: object
                description: Simple object with min & max limits. Null means no limit.
                properties:
                  min:
                    description: The minium limit.
                    type: number
                  max:
                    description: The minium limit.
                    type: number
                example:
                  min: -100
                  max: 100
        "400":
          $ref: "#/components/responses/CCViolation"
        "500":
          $ref: "#/components/responses/CCFailure"
  "/account/summary/{path}":
    get:
      summary: Summary of an account trading activity.
      description: Balance, pending balance, trade volume, partners etc.
      operationId: accountSummary
      parameters:
        - name: cc-user
          in: header
          description: The hostname of the calling ledger (if the caller isn't the client).
          required: false
          schema:
            type: string
        - name: cc-auth
          in: header
          description: The corresponding hash of the calling ledger (if the caller isn't.
            the client)
          required: false
          schema:
            type: string
        - name: path
          in: path
          required: true
          description: The path to the account
          schema:
            type: string
      responses:
        "200":
          description: The account summary object
          content:
            application/json:
              schema:
                type: object
                properties:
                  completed:
                    $ref: "#/components/schemas/AccountActivity"
                  pending:
                    $ref: "#/components/schemas/AccountActivity"
        "400":
          $ref: "#/components/responses/CCViolation"
        "500":
          $ref: "#/components/responses/CCFailure"
  "/accounts/summary/{path}":
    get:
      summary: Summary of trading activity of all accounts on a node.
      description: Balance, pending balance, trade volume, partners etc.
      operationId: accountSummariesRemote
      parameters:
        - name: cc-user
          in: header
          description: The hostname of the calling ledger (if the caller isn't the client).
          required: false
          schema:
            type: string
        - name: cc-auth
          in: header
          description: The corresponding hash of the calling ledger (if the caller isn't.
            the client)
          required: false
          schema:
            type: string
        - name: path
          in: path
          required: true
          description: The path to the remote node
          schema:
            type: string
      responses:
        "200":
          description: The account summaries objects
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    completed:
                      $ref: "#/components/schemas/AccountActivity"
                    pending:
                      $ref: "#/components/schemas/AccountActivity"
        "400":
          $ref: "#/components/responses/CCViolation"
        "500":
          $ref: "#/components/responses/CCFailure"
  "/accounts/summary":
    get:
      summary: Summary of trading activity of all accounts on the current node.
      description: Balance, pending balance, trade volume, partners etc.
      operationId: accountSummariesLocal
      parameters:
        - name: cc-user
          in: header
          description: The hostname of the calling ledger (if the caller isn't the client).
          required: false
          schema:
            type: string
        - name: cc-auth
          in: header
          description: The corresponding hash of the calling ledger (if the caller isn't.
            the client)
          required: false
          schema:
            type: string
      responses:
        "200":
          description: The account summaries objects
          content:
            application/json:
              schema:
                type: object
                properties:
                  additionalProperties:
                    $ref: "#/components/schemas/AccountSummaries"
        "400":
          $ref: "#/components/responses/CCViolation"
        "500":
          $ref: "#/components/responses/CCFailure"
  "/transaction":
    get:
      summary: Filter transactions, paged.
      description: Filter and sort on any field, plus special filters, involving, before, after. Return full transactions or uuids or Entries.
      operationId: filterTransactions
      parameters:
        - name: cc-user
          in: header
          description: The hostname of the calling ledger (if the caller isn't the client)
          required: false
          schema:
            type: string
        - name: cc-auth
          in: header
          description: The corresponding hash of the calling ledger (if the caller isn't the client).
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Number of results to return.
          required: false
          schema:
            type: integer
            default: 10
        - name: fragment
          in: query
          description: String on which to filter the transaction description.
          required: false
          schema:
            type: string
        - name: payer
          in: query
          description: User ID of the payer.
          required: false
          schema:
            type: string
        - name: payee
          in: query
          description: User ID of the payee.
          required: false
          schema:
            type: string
        - name: involving
          in: query
          description: Filter where the payer OR payee was in this transaction.
          required: false
          schema:
            type: integer
        - name: states
          in: query
          description: The workflow state of the transactions; supported states are
            validated, pending, completed, erased, timedout.
          required: false
          schema:
            type: string
            default: completed
        - name: before
          in: query
          description: The date after which the filtered transaction were first written for comparison with a mysql DATETIME value. e.g. 2020-07-25 12:55:54
          required: false
          schema:
            type: string
        - name: after
          in: query
          description: The date before which the filtered transaction were first written for comparison with a mysql DATETIME value. e.g. 2020-07-25 12:55:54
          required: false
          schema:
            type: string
        - name: sort
          in: query
          description: Sort field and direction; direction is optional.
          required: false
          schema:
            type: string
            default: title,desc
      responses:
        "200":
          description: Ledger entries (if 'full' is true).
          content:
            "application/json":
              schema:
                type: object
                description: The UUIDs, keyed by entry ids (actually numbers but the testing framework sees the json keys as strings.)
                additionalProperties:
                  type: string
                example:
                  123: a6f5ae5d-3b4b-4e1b-a54a-00e510fd3c97
                  456: b6f5ae5d-3b4b-4e1b-a54a-00e510fd3c98
                  789: c6f5ae5d-3b4b-4e1b-a54a-00e510fd3c99

        "400":
          $ref: "#/components/responses/CCViolation"
        "500":
          $ref: "#/components/responses/CCFailure"
    post:
      summary: Propose a transaction.
      description: A trunkwards node cannot propose a transaction on behalf of a leafwards account.
      operationId: newTransaction
      requestBody:
        $ref: '#/components/requestBodies/NewTransaction'
      responses:
        "200":
          description: Validated transaction in full view mode (with transitions) for user's confirmation. Note that transactions in 'validated' state are only visible to their author's and may be cleaned up (deleted) periodically
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Transaction"
        "201":
          description: Transaction is written into the initial state defined by its workflow.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          $ref: "#/components/responses/CCViolation"
        "500":
          $ref: "#/components/responses/CCFailure"
  /transaction/relay:
    post:
      summary: Relay a proposed transaction through the node tree.
      description: This can only be used as a result of a POST /transaction coming from the leaf at the top of the stream
      operationId: relayTransaction
      requestBody:
        $ref: '#/components/requestBodies/Transaction'
      parameters:
        - name: cc-user
          in: header
          description: The hostname of the calling ledger (if the caller isn't the client).
          required: false
          schema:
            type: string
        - name: cc-auth
          in: header
          description: The corresponding hash of the calling ledger (if the caller isn't
            the client).
          required: false
          schema:
            type: string
      responses:
        "200":
          description: No 'state' property was provided so the validated transaction is returned in full, for user confirmation.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Transaction"
        "201":
          description: The 'state' property was provided and the transaction was written to that state.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          $ref: "#/components/responses/CCViolation"
        "500":
          $ref: "#/components/responses/CCFailure"

  /transaction/{uuid}/{format}:
    get:
      summary: Retrieve a single transaction
      description: Format of the transaction can be either 'full' (default), or 'entry'.
      operationId: getTransaction
      parameters:
        - name: cc-user
          in: header
          description: The hostname of the calling ledger (if the caller isn't the client).
          required: false
          schema:
            type: string
        - name: cc-auth
          in: header
          description: The corresponding hash of the calling ledger (if the caller isn't
            the client).
          required: false
          schema:
            type: string
        - name: uuid
          in: path
          description: The uuid of the one transaction required.
          required: true
          schema:
            type: string
        - name: format
          in: path
          description: The format to show the results in.
          required: false
          schema:
            type: string
            default: full
            enum:
              - entry
              - full
      responses:
        "200":
          description: The transaction.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Transaction"
        "400":
          $ref: "#/components/responses/CCViolation"
        "500":
          $ref: "#/components/responses/CCFailure"
  "/transaction/{uuid}/{dest_state}":
    patch:
      summary: Propose change to transaction state.
      operationId: stateChange
      parameters:
        - name: cc-user
          in: header
          description: The hostname of the calling ledger (if the caller isn't the client).
          required: false
          schema:
            type: string
        - name: cc-auth
          in: header
          description: The corresponding hash of the calling ledger (if the caller isn't
            the client).
          required: false
          schema:
            type: string
        - in: path
          name: uuid
          description: The unique id of the temp transaction.
          required: true
          schema:
            type: string
        - in: path
          name: dest_state
          description: The desired workflow state.
          required: true
          schema:
            type: string
      responses:
        "201":
          description: The transaction state was changed.
        "400":
          $ref: "#/components/responses/CCViolation"
        "500":
          $ref: "#/components/responses/CCFailure"
  "/workflows":
    get:
      summary: Retrieve (localised) workflows from the trunkwards node.
      operationId: workflows
      description: For leafwards nodes to know what workflows are available.
      responses:
        "200":
          description: Here are the workflow objects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  additionalProperties:
                    $ref: "#/components/schemas/Workflow"
        "500":
          $ref: "#/components/responses/CCFailure"
  "/trunkwards":
    get:
      summary: get a list of all the nodes going down to the trunk.
      operationId: trunkwardsNodes
      description: (experimental) May not be needed.
      responses:
        "200":
          description: list of node names
          content:
            application/json:
              type: array
              items:
                type: string
components:
  responses:
    CCFailure:
      description: Internal/software failure
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/CCError"
    CCViolation:
      description: Bad data provided.
      content:
        "application/json":
          schema:
            $ref: "#/components/schemas/CCError"
  requestBodies:
    NewTransaction:
      description: The components of a transaction to be built.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NewTransaction'
      required: true
    Transaction:
      description: A fullly formed transaction
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Transaction'
      required: true
  schemas:
    Endpoints:
      type: object
      description: REST methods keyed by operation name.
      properties:
        additionalProperties:
          $ref: '#/components/schemas/Methods'
    Methods:
      type: array
      description: A list of REST methods available at an endpoint
      items:
        type: string
    AccountSummaries:
      type: object
      properties:
        completed:
          $ref: "#/components/schemas/AccountActivity"
        pending:
          $ref: "#/components/schemas/AccountActivity"
    AccountActivity:
      type: object
      description: A summary of transactions
      properties:
        balance:
          type: number
          description: Sum of all transactions; the gross_in minus gross_out
          example: -99
        volume:
          type: number
          description: Sum of all transactions; the gross_in plus gross_out
          example: -99
        gross_in:
          type: number
          description: The total of transactions where this account was the payee
          example: 900
        gross_out:
          type: number
          description: The total of transactions where this account was the payer
          example: 999
        partners:
          type: number
          description: The number of different accounts traded with (in this group?)
          example: 9
        trades:
          type: number
          description: the number of primary entries the account was involved in
          example: 99
        entries:
          type: number
          description: the number of entries in the database the account was involved in
          example: 99
    CCError:
      type: object
      description: Error object indicating which node the error originated on.
      required:
        - class
        - node
      properties:
        class:
          type: string
          description: Used to reconstruct the error object on the client.
          example: UnresolvedAccountnameViolation
        node:
          type: string
          description: The name of the node on which the error was flagged.
          example: child2
        additionalProperties:
          type: string
    NewTransaction:
      type: object
      description: A proposed transaction sent by a client.
      required:
        - payer
        - payee
        - quant
        - description
        - type
      properties:
        payee:
          description: The absolute or relative ledger path to the payee.
          example: alice
        payer:
          description: The absolute or relative ledger path to the payer.
          type: string
          example: child2/bob
        quant:
          description: An integer value.
          type: integer
          example: 100
        description:
          description: User-entered note about the transaction. (UTF8)
          type: string
          example: blah blah
        type:
          description: The id of the transaction workflow. Workflow names get be obtained from /workflows
          type: string
          example: credit
    Transaction:
      type: object
      description: A complete transaction object. Note that the first of the entries is ALWAYS the main one.
      required:
        - uuid
        - type
        - state
        - version
      properties:
        uuid:
          description: The uuid of the transaction. If not supplied one will be generated.
          type: string
          example: a6f5ae5d-3b4b-4e1b-a54a-00e510fd3c99
        created:
          description: The first time the transaction was saved
          type: string
          example: 2022-02-02 23:38:59
        updated:
          description: The last time the transaction was saved
          type: string
          example: 2022-02-02 23:38:59
        type:
          description: The id of the transaction workflow. Workflow names get be obtained from /workflows
          type: string
          example: 3rdparty
        version:
          description: Version number is incremented each time the transaction is written;
          type: integer
          example: 2
        state:
          $ref: '#/components/schemas/State'
        entries:
          type: array
          items:
            $ref: "#/components/schemas/Entry"
        transitions:
          description: A list of available states to which the current user can transition the transaction.
          type: array
          items:
            type: string
    Entry:
      type: object
      description: A single flow of currency between two accounts; Child of the transaction object
      required:
        - payer
        - payee
        - quant
        - description
      properties:
        payee:
          description: The absolute or relative ledger path to the payee.
          type: string
          example: child1/alice
        payer:
          description: The absolute or relative ledger path to the payer.
          type: string
          example: child2/bob
        quant:
          description: An integer value.
          type: integer
          example: 100
        description:
          description: User-entered note about the transaction.
          type: string
          example: blah blah
        author:
          description: Id of the account which initiated this entry.
          type: string
          example: child2/fees
        metadata:
          description: Any other information to be stored in key/value pairs, as determined by convention.
          type: object
          additionalProperties: {}
          example: {"payer_name": "Alice Liddell"}
    StandaloneEntry:
      type: object
      description: A single entry, including the transaction headers
      required:
        - payer
        - payee
        - quant
        - description
        - author
        - metadata
        - type
        - created
        - updated
        - uuid
        - state
        - version
      properties:
        uuid:
          description: The unique transversal transaction id
          type: string
          example: acbe0c70-9f1e-4c0e-b238-6476c2a7cd22
        payee:
          description: The absolute or relative ledger path to the payee.
          type: string
          example: child1/alice
        payer:
          description: The absolute or relative ledger path to the payee.
          type: string
          example: trunk/branch2/bob
        quant:
          description: The amount of this entry.
          type: number
          example: 99.99
        description:
          description: The reason for this entry.
          type: string
          example: This is a test
        author:
          description: The user who generated this entry.
          type: string
          example: admin
        metadata:
          description: An object containing arbitrary properties.
          type: object
          additionalProperties: {}
          example: {"payer": "Bob Hoskins"}
        created:
          description: The first time the transaction was saved
          type: string
          example: 2022-02-02 23:38:59
        updated:
          description: The last time the transaction was saved
          type: string
          example: 2022-02-02 23:38:59
        type:
          description: The id of the transaction workflow. Workflow names get be obtained from /workflows
          type: string
          example: bill
        state:
          $ref: '#/components/schemas/State'
        version:
          description: This is an integer, but for some reason json_decode makes 0 into a string.
          type: integer
          example: 3
    AccountHistory:
      # Not sure about this. See https://swagger.io/docs/specification/data-models/dictionaries/
      type: object
      description: a list of values summarising the account's trading activity.
      additionalProperties:
        type: number
      example:
        152847346726: 0
        152847684373: 18
        152847973621: 6
    Workflow:
      type: object
      description: An object defining who can move transactions between states.
      properties:
        label:
          description: The name of the workflow.
          type: string
          example: MyWorkflow
        summary:
          description: Short description of what or who the workflow is for.
          type: string
          example: For business payments.
        active:
          description: If set to false, no new transactions should use this.
          type: boolean
          example: true
        creation:
          description: Paramaters for the creation of the transaction.
          type: object
          properties:
            by:
              type: string
              description: The relationship of the creator to the transaction, (including admin).
            state:
              $ref: '#/components/schemas/State'
            label:
              type: string
              description: This is the text to put on the form button;
            confirm:
              type: boolean
              description: TRUE if transactions should be confirmed by the creator, in a subsequent operation.
          example:
            by: payer
            state: completed
            label: Create
            confirm: 0
        states:
          description: States that the transaction might be in.
          type: array
          items:
            type: string
    State:
      type: string
      description: Any of a list of defined workflow states. This builtin list can be augmented.
      default: completed
      enum:
       - validated
       - pending
       - completed
       - erased
      example: completed
